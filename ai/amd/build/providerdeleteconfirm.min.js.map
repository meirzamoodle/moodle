{"version":3,"file":"providerdeleteconfirm.min.js","sources":["../src/providerdeleteconfirm.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AI provider deletion confirmation.\n * Renders a confirmation modal when deleting an AI provider.\n *\n * @module     core_ai/providerdeleteconfirm\n * @copyright  2024 Matt Porritt <matt.porritt@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getString} from 'core/str';\nimport DeleteCancelModal from 'core/modal_delete_cancel';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\n\n/**\n * Call the delete service.\n *\n * @param {String} providerid The provider id.\n * @return {Promise} The promise.\n */\nconst deleteProviderService = async(providerid) => Ajax.call([{\n    methodname: 'core_ai_delete_provider_instance',\n    args: {\n        providerid: providerid,\n    },\n}])[0];\n\n/**\n * Handle the delete event.\n * Calls the delete service and reloads the page.\n *\n * @param {String} providerid The provider id.\n * @returns {Promise<void>}\n */\nconst handleDelete = async(providerid) => {\n    await deleteProviderService(providerid);\n    // Refresh the page, so we get the updated list of providers, and any messages.\n    window.location.reload();\n};\n\n/**\n * Show the delete confirmation modal.\n *\n * @param {Event} e The event object.\n */\nconst showDeleteModal = async(e) => {\n    const providerid = e.target.dataset.id;\n    const provider = e.target.dataset.provider;\n    const name = e.target.dataset.name;\n    const bodyparams = {\n        provider: provider,\n        name: name,\n    };\n    const modal = await DeleteCancelModal.create({\n        title: await getString('providerinstancedelete', 'core_ai'),\n        body: await getString('providerinstancedeleteconfirm', 'core_ai', bodyparams),\n        show: true,\n        removeOnClose: true,\n    });\n\n    // Handle delete event.\n    modal.getRoot().on(ModalEvents.delete, (e) => {\n        e.preventDefault();\n        handleDelete(providerid);\n        modal.destroy();\n    });\n};\n\n/**\n * Initialise the delete listeners.\n *\n */\nexport const init = () => {\n    document.querySelectorAll('.ai-provider-delete').forEach((button) => {\n        button.addEventListener('click', (e) => {\n                e.preventDefault();\n                showDeleteModal(e);\n        });\n    });\n};\n"],"names":["handleDelete","async","Ajax","call","methodname","args","providerid","deleteProviderService","window","location","reload","document","querySelectorAll","forEach","button","addEventListener","e","preventDefault","target","dataset","id","bodyparams","provider","name","modal","DeleteCancelModal","create","title","body","show","removeOnClose","getRoot","on","ModalEvents","delete","destroy","showDeleteModal"],"mappings":";;;;;;;;kPAgDMA,aAAeC,MAAAA,kBAdSA,OAAAA,YAAqBC,cAAKC,KAAK,CAAC,CAC1DC,WAAY,mCACZC,KAAM,CACFC,WAAYA,eAEhB,GAUMC,CAAsBD,YAE5BE,OAAOC,SAASC,wBAmCA,KAChBC,SAASC,iBAAiB,uBAAuBC,SAASC,SACtDA,OAAOC,iBAAiB,SAAUC,IAC1BA,EAAEC,iBA9BMhB,OAAAA,UACdK,WAAaU,EAAEE,OAAOC,QAAQC,GAG9BC,WAAa,CACfC,SAHaN,EAAEE,OAAOC,QAAQG,SAI9BC,KAHSP,EAAEE,OAAOC,QAAQI,MAKxBC,YAAcC,6BAAkBC,OAAO,CACzCC,YAAa,kBAAU,yBAA0B,WACjDC,WAAY,kBAAU,gCAAiC,UAAWP,YAClEQ,MAAM,EACNC,eAAe,IAInBN,MAAMO,UAAUC,GAAGC,sBAAYC,QAASlB,IACpCA,EAAEC,iBACFjB,aAAaM,YACbkB,MAAMW,cAYEC,CAAgBpB"}