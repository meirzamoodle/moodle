{"version":3,"file":"providerdeleteconfirm.min.js","sources":["../src/providerdeleteconfirm.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AI provider deletion confirmation.\n * Renders a confirmation modal when deleting an AI provider.\n *\n * @module     core_ai/providerdeleteconfirm\n * @copyright  2024 Matt Porritt <matt.porritt@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getString} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\nimport DeleteCancelModal from 'core/modal_delete_cancel';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport {refreshTableContent} from 'core_table/dynamic';\nimport {fetchNotifications} from 'core/notification';\nimport * as Selectors from 'core_table/local/dynamic/selectors';\nimport * as DynamicTable from 'core_table/dynamic';\n\n/**\n * Call the delete service.\n *\n * @param {String} providerid The provider id.\n * @return {Promise} The promise.\n */\nconst deleteProviderService = async(providerid) => Ajax.call([{\n    methodname: 'core_ai_delete_provider_instance',\n    args: {\n        providerid: providerid,\n    },\n}])[0];\n\n/**\n * Handle the delete event.\n * Calls the delete service and reloads the page.\n *\n * @param {String} providerid The provider id.\n * @returns {Promise<void>}\n */\nconst handleDelete = async(providerid) => {\n    await deleteProviderService(providerid);\n    // Reload the table, so we get the updated list of providers, and any messages.\n    const tableRoot = document.querySelector(Selectors.main.region);\n    await Promise.all([\n        refreshTableContent(tableRoot),\n        fetchNotifications(),\n    ]);\n};\n\n/**\n * Show the delete confirmation modal.\n *\n * @param {Event} e The event object.\n */\nconst showDeleteModal = async(e) => {\n    const providerid = e.target.dataset.id;\n    const provider = e.target.dataset.provider;\n    const name = e.target.dataset.name;\n    const bodyparams = {\n        provider: provider,\n        name: name,\n    };\n    const modal = await DeleteCancelModal.create({\n        title: getString('providerinstancedelete', 'core_ai'),\n        body: getString('providerinstancedeleteconfirm', 'core_ai', bodyparams),\n        show: true,\n        removeOnClose: true,\n    });\n\n    // Handle delete event.\n    modal.getRoot().on(ModalEvents.delete, (e) => {\n        e.preventDefault();\n        handleDelete(providerid);\n        modal.destroy();\n    });\n};\n\n/**\n * Initialise the delete listeners.\n */\nexport const init = () => {\n    prefetchStrings('core_ai', [\n        'providerinstancedelete',\n        'providerinstancedeleteconfirm',\n    ]);\n\n    document.querySelectorAll('.ai-provider-delete').forEach((button) => {\n        button.addEventListener('click', (e) => {\n            e.preventDefault();\n            showDeleteModal(e);\n        });\n    });\n\n    document.addEventListener(DynamicTable.Events.tableContentRefreshed, () => {\n        init();\n    }, {once: true});\n};\n"],"names":["handleDelete","async","Ajax","call","methodname","args","providerid","deleteProviderService","tableRoot","document","querySelector","Selectors","main","region","Promise","all","init","querySelectorAll","forEach","button","addEventListener","e","preventDefault","target","dataset","id","bodyparams","provider","name","modal","DeleteCancelModal","create","title","body","show","removeOnClose","getRoot","on","ModalEvents","delete","destroy","showDeleteModal","DynamicTable","Events","tableContentRefreshed","once"],"mappings":";;;;;;;;kVAqDMA,aAAeC,MAAAA,kBAdSA,OAAAA,YAAqBC,cAAKC,KAAK,CAAC,CAC1DC,WAAY,mCACZC,KAAM,CACFC,WAAYA,eAEhB,GAUMC,CAAsBD,kBAEtBE,UAAYC,SAASC,cAAcC,UAAUC,KAAKC,cAClDC,QAAQC,IAAI,EACd,oCAAoBP,YACpB,yCAmCKQ,KAAO,mCACA,UAAW,CACvB,yBACA,kCAGJP,SAASQ,iBAAiB,uBAAuBC,SAASC,SACtDA,OAAOC,iBAAiB,SAAUC,IAC9BA,EAAEC,iBAlCUrB,OAAAA,UACdK,WAAae,EAAEE,OAAOC,QAAQC,GAG9BC,WAAa,CACfC,SAHaN,EAAEE,OAAOC,QAAQG,SAI9BC,KAHSP,EAAEE,OAAOC,QAAQI,MAKxBC,YAAcC,6BAAkBC,OAAO,CACzCC,OAAO,kBAAU,yBAA0B,WAC3CC,MAAM,kBAAU,gCAAiC,UAAWP,YAC5DQ,MAAM,EACNC,eAAe,IAInBN,MAAMO,UAAUC,GAAGC,sBAAYC,QAASlB,IACpCA,EAAEC,iBACFtB,aAAaM,YACbuB,MAAMW,cAgBFC,CAAgBpB,SAIxBZ,SAASW,iBAAiBsB,aAAaC,OAAOC,uBAAuB,KACjE5B,SACD,CAAC6B,MAAM"}