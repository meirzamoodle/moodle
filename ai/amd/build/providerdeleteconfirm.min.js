define("core_ai/providerdeleteconfirm",["exports","core/str","core/prefetch","core/modal_delete_cancel","core/modal_events","core/ajax","core_table/dynamic","core/notification","core_table/local/dynamic/selectors"],(function(_exports,_str,_prefetch,_modal_delete_cancel,_modal_events,_ajax,DynamicTable,_notification,Selectors){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * AI provider deletion confirmation.
   * Renders a confirmation modal when deleting an AI provider.
   *
   * @module     core_ai/providerdeleteconfirm
   * @copyright  2024 Matt Porritt <matt.porritt@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_modal_delete_cancel=_interopRequireDefault(_modal_delete_cancel),_modal_events=_interopRequireDefault(_modal_events),_ajax=_interopRequireDefault(_ajax),DynamicTable=_interopRequireWildcard(DynamicTable),Selectors=_interopRequireWildcard(Selectors);const handleDelete=async providerid=>{await(async providerid=>_ajax.default.call([{methodname:"core_ai_delete_provider_instance",args:{providerid:providerid}}])[0])(providerid);const tableRoot=document.querySelector(Selectors.main.region);await Promise.all([(0,DynamicTable.refreshTableContent)(tableRoot),(0,_notification.fetchNotifications)()])},init=()=>{(0,_prefetch.prefetchStrings)("core_ai",["providerinstancedelete","providerinstancedeleteconfirm"]),document.querySelectorAll(".ai-provider-delete").forEach((button=>{button.addEventListener("click",(e=>{e.preventDefault(),(async e=>{const providerid=e.target.dataset.id,bodyparams={provider:e.target.dataset.provider,name:e.target.dataset.name},modal=await _modal_delete_cancel.default.create({title:(0,_str.getString)("providerinstancedelete","core_ai"),body:(0,_str.getString)("providerinstancedeleteconfirm","core_ai",bodyparams),show:!0,removeOnClose:!0});modal.getRoot().on(_modal_events.default.delete,(e=>{e.preventDefault(),handleDelete(providerid),modal.destroy()}))})(e)}))})),document.addEventListener(DynamicTable.Events.tableContentRefreshed,(()=>{init()}),{once:!0})};_exports.init=init}));

//# sourceMappingURL=providerdeleteconfirm.min.js.map