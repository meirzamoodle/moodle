{"version":3,"file":"dynamic.min.js","sources":["../src/dynamic.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to handle dynamic table features.\n *\n * @module     core_table/dynamic\n * @copyright  2020 Simey Lameze <simey@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from 'core_table/local/dynamic/selectors';\nimport Events from './local/dynamic/events';\nimport Pending from 'core/pending';\nimport {addIconToContainer} from 'core/loadingicon';\nimport {fetch as fetchTableData} from 'core_table/local/dynamic/repository';\nimport Notification from 'core/notification';\n\nlet watching = false;\n\n/**\n * Ensure that a table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Bool}\n */\nconst checkTableIsDynamic = tableRoot => {\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    if (!tableRoot.matches(Selectors.main.region)) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return true;\n};\n\n/**\n * Get the filterset data from a known dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nconst getFiltersetFromTable = tableRoot => {\n    return JSON.parse(tableRoot.dataset.tableFilters);\n};\n\n/**\n * Update the specified table based on its current values.\n *\n * @param {HTMLElement} tableRoot\n * @param {Bool} resetContent\n * @param {String} methodName\n * @returns {Promise}\n */\nexport const refreshTableContent = (tableRoot, resetContent = false, methodName = \"\") => {\n    const filterset = getFiltersetFromTable(tableRoot);\n    addIconToContainer(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:refreshTableContent');\n\n    return fetchTableData(\n        tableRoot.dataset.tableComponent,\n        tableRoot.dataset.tableHandler,\n        tableRoot.dataset.tableUniqueid,\n        {\n            sortData: JSON.parse(tableRoot.dataset.tableSortData),\n            joinType: filterset.jointype,\n            filters: filterset.filters,\n            firstinitial: tableRoot.dataset.tableFirstInitial,\n            lastinitial: tableRoot.dataset.tableLastInitial,\n            pageNumber: tableRoot.dataset.tablePageNumber,\n            pageSize: tableRoot.dataset.tablePageSize,\n            hiddenColumns: JSON.parse(tableRoot.dataset.tableHiddenColumns),\n        },\n        resetContent,\n        methodName,\n    )\n    .then(data => {\n        const placeholder = document.createElement('div');\n        placeholder.innerHTML = data.html;\n        tableRoot.replaceWith(...placeholder.childNodes);\n\n        // Update the tableRoot.\n        return getTableFromId(tableRoot.dataset.tableUniqueid);\n    }).then(tableRoot => {\n        tableRoot.dispatchEvent(new CustomEvent(Events.tableContentRefreshed, {\n            bubbles: true,\n        }));\n\n        return tableRoot;\n    })\n    .then(tableRoot => {\n        pendingPromise.resolve();\n\n        return tableRoot;\n    });\n};\n\nexport const updateTable = (tableRoot, {\n    sortBy = null,\n    sortOrder = null,\n    filters = null,\n    firstInitial = null,\n    lastInitial = null,\n    pageNumber = null,\n    pageSize = null,\n    hiddenColumns = null,\n} = {}, refreshContent = true) => {\n    checkTableIsDynamic(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:updateTable');\n    let tableConfigChanged = false;\n\n    // Update sort fields.\n    if (sortBy && sortOrder) {\n        // Always update the table if requested and there were sort fields.\n        // These fields are only ever normalised in the backend.\n        tableConfigChanged = true;\n\n        const sortData = JSON.parse(tableRoot.dataset.tableSortData);\n        sortData.unshift({\n            sortby: sortBy,\n            sortorder: parseInt(sortOrder, 10),\n        });\n        tableRoot.dataset.tableSortData = JSON.stringify(sortData);\n    }\n\n    // Update initials.\n    if (firstInitial !== null) {\n        if (tableRoot.dataset.tableFirstInitial !== firstInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFirstInitial = firstInitial;\n    }\n\n    if (lastInitial !== null) {\n        if (tableRoot.dataset.tableLastInitial !== lastInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableLastInitial = lastInitial;\n    }\n\n    if (pageSize !== null) {\n        if (tableRoot.dataset.tablePageSize != pageSize) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageSize = pageSize;\n    }\n\n    // Update filters.\n    if (filters) {\n        const filterJson = JSON.stringify(filters);\n\n        if (tableRoot.dataset.tableFilters !== filterJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFilters = filterJson;\n    }\n\n    // Reset to page 1 when table content is being altered by filtering or sorting.\n    // This ensures the table page being loaded always exists, and gives a consistent experience.\n    if (tableConfigChanged) {\n        pageNumber = 1;\n    }\n\n    // Update hidden columns.\n    if (hiddenColumns) {\n        const columnJson = JSON.stringify(hiddenColumns);\n\n        if (tableRoot.dataset.tableHiddenColumns !== columnJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableHiddenColumns = columnJson;\n    }\n\n    if (pageNumber !== null) {\n        if (tableRoot.dataset.tablePageNumber != pageNumber) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageNumber = pageNumber;\n    }\n\n    // Refresh.\n    if (refreshContent && tableConfigChanged) {\n        return refreshTableContent(tableRoot)\n        .then(tableRoot => {\n            pendingPromise.resolve();\n            return tableRoot;\n        });\n    } else {\n        pendingPromise.resolve();\n        return Promise.resolve(tableRoot);\n    }\n};\n\n/**\n * Get the table dataset for the specified tableRoot, ensuring that the provided table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {DOMStringMap}\n */\nconst getTableData = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return tableRoot.dataset;\n};\n\n/**\n * Update the specified table using the new filters.\n *\n * @param {HTMLElement} tableRoot\n * @param {Object} filters\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFilters = (tableRoot, filters, refreshContent = true) =>\n    updateTable(tableRoot, {filters}, refreshContent);\n\n/**\n * Get the filter data for the specified table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nexport const getFilters = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return getFiltersetFromTable(tableRoot);\n};\n\n/**\n * Update the sort order.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} sortBy\n * @param {Number} sortOrder\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setSortOrder = (tableRoot, sortBy, sortOrder, refreshContent = true) =>\n    updateTable(tableRoot, {sortBy, sortOrder}, refreshContent);\n\n/**\n * Set the page number.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} pageNumber\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageNumber = (tableRoot, pageNumber, refreshContent = true) =>\n    updateTable(tableRoot, {pageNumber}, refreshContent);\n\n/**\n * Get the current page number.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageNumber = tableRoot => getTableData(tableRoot).tablePageNumber;\n\n/**\n * Set the page size.\n *\n * @param {HTMLElement} tableRoot\n * @param {Number} pageSize\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageSize = (tableRoot, pageSize, refreshContent = true) =>\n    updateTable(tableRoot, {pageSize, pageNumber: 1}, refreshContent);\n\n/**\n * Get the current page size.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageSize = tableRoot => getTableData(tableRoot).tablePageSize;\n\n/**\n * Update the first initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} firstInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFirstInitial = (tableRoot, firstInitial, refreshContent = true) =>\n    updateTable(tableRoot, {firstInitial}, refreshContent);\n\n/**\n * Get the current first initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getFirstInitial = tableRoot => getTableData(tableRoot).tableFirstInitial;\n\n/**\n * Update the last initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} lastInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setLastInitial = (tableRoot, lastInitial, refreshContent = true) =>\n    updateTable(tableRoot, {lastInitial}, refreshContent);\n\n/**\n * Get the current last initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getLastInitial = tableRoot => getTableData(tableRoot).tableLastInitial;\n\n/**\n * Hide a column in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToHide\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const hideColumn = (tableRoot, columnToHide, refreshContent = true) => {\n    const hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns.push(columnToHide);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Make a hidden column visible in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToShow\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const showColumn = (tableRoot, columnToShow, refreshContent = true) => {\n    let hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns = hiddenColumns.filter(columnName => columnName !== columnToShow);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Reset table preferences.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Promise}\n */\nconst resetTablePreferences = tableRoot => refreshTableContent(tableRoot, true);\n\n/**\n * Set up listeners to handle table updates.\n */\nexport const init = () => {\n    if (watching) {\n        // Already watching.\n        return;\n    }\n    watching = true;\n\n    document.addEventListener('click', e => {\n        const tableRoot = e.target.closest(Selectors.main.region);\n\n        if (!tableRoot) {\n            return;\n        }\n\n        const sortableLink = e.target.closest(Selectors.table.links.sortableColumn);\n        if (sortableLink) {\n            e.preventDefault();\n\n            setSortOrder(tableRoot, sortableLink.dataset.sortby, sortableLink.dataset.sortorder)\n            .catch(Notification.exception);\n        }\n\n        const firstInitialLink = e.target.closest(Selectors.initialsBar.links.firstInitial);\n        if (firstInitialLink !== null) {\n            e.preventDefault();\n\n            setFirstInitial(tableRoot, firstInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const lastInitialLink = e.target.closest(Selectors.initialsBar.links.lastInitial);\n        if (lastInitialLink !== null) {\n            e.preventDefault();\n\n            setLastInitial(tableRoot, lastInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const pageItem = e.target.closest(Selectors.paginationBar.links.pageItem);\n        if (pageItem) {\n            e.preventDefault();\n\n            setPageNumber(tableRoot, pageItem.dataset.pageNumber).catch(Notification.exception);\n        }\n\n        const hide = e.target.closest(Selectors.table.links.hide);\n        if (hide) {\n            e.preventDefault();\n\n            hideColumn(tableRoot, hide.dataset.column).catch(Notification.exception);\n        }\n\n        const show = e.target.closest(Selectors.table.links.show);\n        if (show) {\n            e.preventDefault();\n\n            showColumn(tableRoot, show.dataset.column).catch(Notification.exception);\n        }\n\n        const resetTablePreferencesLink = e.target.closest('.resettable a');\n        if (resetTablePreferencesLink) {\n            e.preventDefault();\n\n            resetTablePreferences(tableRoot).catch(Notification.exception);\n        }\n\n        const showCountLink = e.target.closest(Selectors.showCount.links.toggle);\n        if (showCountLink) {\n            e.preventDefault();\n\n            setPageSize(tableRoot, showCountLink.dataset.targetPageSize).catch(Notification.exception);\n        }\n    });\n};\n\n/**\n * Fetch the table via its table region id.\n *\n * @param {String} tableRegionId\n * @returns {HTMLElement}\n */\nexport const getTableFromId = tableRegionId => {\n    const tableRoot = document.querySelector(Selectors.main.fromRegionId(tableRegionId));\n\n\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return tableRoot;\n};\n\nexport {\n    Events\n};\n"],"names":["watching","checkTableIsDynamic","tableRoot","Error","matches","Selectors","main","region","getFiltersetFromTable","JSON","parse","dataset","tableFilters","refreshTableContent","resetContent","methodName","filterset","pendingPromise","Pending","tableComponent","tableHandler","tableUniqueid","sortData","tableSortData","joinType","jointype","filters","firstinitial","tableFirstInitial","lastinitial","tableLastInitial","pageNumber","tablePageNumber","pageSize","tablePageSize","hiddenColumns","tableHiddenColumns","then","data","placeholder","document","createElement","innerHTML","html","replaceWith","childNodes","getTableFromId","dispatchEvent","CustomEvent","Events","tableContentRefreshed","bubbles","resolve","updateTable","sortBy","sortOrder","firstInitial","lastInitial","refreshContent","tableConfigChanged","unshift","sortby","sortorder","parseInt","stringify","filterJson","columnJson","Promise","getTableData","setSortOrder","setPageNumber","setPageSize","setFirstInitial","setLastInitial","hideColumn","columnToHide","push","showColumn","columnToShow","filter","columnName","addEventListener","e","target","closest","sortableLink","table","links","sortableColumn","preventDefault","catch","Notification","exception","firstInitialLink","initialsBar","initial","lastInitialLink","pageItem","paginationBar","hide","column","show","resetTablePreferences","showCountLink","showCount","toggle","targetPageSize","tableRegionId","querySelector","fromRegionId"],"mappings":"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"}