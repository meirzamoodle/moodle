{"version":3,"file":"image.min.js","sources":["../src/image.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Image class for Moodle.\n *\n * @module      tiny_media/image\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ImageModal from './imagemodal';\nimport {getImagePermissions} from './options';\nimport {getFilePicker} from 'editor_tiny/options';\nimport {ImageInsert} from 'tiny_media/imageinsert';\nimport {\n    bodyImageInsert,\n    footerImageInsert,\n} from 'tiny_media/imagehelpers';\n\nexport default class MediaImage {\n    canShowFilePicker = false;\n    editor = null;\n    currentModal = null;\n    /**\n     * @type {HTMLElement|null} The root element.\n     */\n    root = null;\n\n    constructor(editor) {\n        const permissions = getImagePermissions(editor);\n\n        // Indicates whether the file picker can be shown.\n        this.canShowFilePicker = permissions.filepicker && (typeof getFilePicker(editor, 'image') !== 'undefined');\n\n        this.editor = editor;\n    }\n\n    async displayDialogue() {\n        this.currentModal = await ImageModal.create();\n        this.root = this.currentModal.getRoot()[0];\n        this.loadInsertImage();\n    }\n\n    /**\n     * Displays an insert image view asynchronously.\n     *\n     * @returns {Promise<void>}\n     */\n    loadInsertImage = async function() {\n        const templateContext = {elementid: this.editor.id, showfilepicker: this.canShowFilePicker};\n\n        Promise.all([bodyImageInsert(templateContext, this.root), footerImageInsert(templateContext, this.root)])\n            .then(() => {\n                const imageinsert = new ImageInsert(\n                    this.root,\n                    this.editor,\n                    this.currentModal,\n                    this.canShowFilePicker,\n                );\n                imageinsert.init();\n                return;\n            })\n            .catch(error => {\n                window.console.log(error);\n            });\n    };\n}\n"],"names":["constructor","editor","async","templateContext","elementid","this","id","showfilepicker","canShowFilePicker","Promise","all","root","then","ImageInsert","currentModal","init","catch","error","window","console","log","permissions","filepicker","ImageModal","create","getRoot","loadInsertImage"],"mappings":"kjBAyCIA,YAAYC,kDARQ,iCACX,0CACM,kCAIR,8CAsBWC,uBACRC,gBAAkB,CAACC,UAAWC,KAAKJ,OAAOK,GAAIC,eAAgBF,KAAKG,mBAEzEC,QAAQC,IAAI,EAAC,iCAAgBP,gBAAiBE,KAAKM,OAAO,mCAAkBR,gBAAiBE,KAAKM,QAC7FC,MAAK,KACkB,IAAIC,yBACpBR,KAAKM,KACLN,KAAKJ,OACLI,KAAKS,aACLT,KAAKG,mBAEGO,UAGfC,OAAMC,QACHC,OAAOC,QAAQC,IAAIH,mBAlCrBI,aAAc,gCAAoBpB,aAGnCO,kBAAoBa,YAAYC,iBAAyD,KAAnC,2BAAcrB,OAAQ,cAE5EA,OAASA,oCAITa,mBAAqBS,oBAAWC,cAChCb,KAAON,KAAKS,aAAaW,UAAU,QACnCC"}