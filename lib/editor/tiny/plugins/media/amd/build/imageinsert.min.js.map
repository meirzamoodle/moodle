{"version":3,"file":"imageinsert.min.js","sources":["../src/imageinsert.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin image insertion class for Moodle.\n *\n * @module      tiny_media/imagedetails\n * @copyright   2024 Meirza <meirza.arson@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Notification from 'core/notification';\nimport Dragdrop from 'tiny_media/imagedragdrop';\nimport Selectors from './selectors';\nimport uploadFile from 'editor_tiny/uploader';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getStrings} from 'core/str';\nimport {component} from \"./common\";\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport {ImageDetails} from 'tiny_media/imagedetails';\nimport {\n    bodyImageDetails,\n    footerImageDetails,\n    showElements,\n    hideElements\n} from 'tiny_media/imagehelpers';\n\nprefetchStrings('tiny_media', [\n    'insertimage',\n    'enterurl',\n    'enterurlor',\n    'imageurlrequired',\n    'uploading',\n    'loading',\n    'sizecustom_help',\n]);\n\nexport class ImageInsert {\n\n    constructor(\n        root,\n        editor,\n        currentModal,\n        canShowFilePicker,\n    ) {\n        this.root = root;\n        this.editor = editor;\n        this.currentModal = currentModal;\n        this.canShowFilePicker = canShowFilePicker;\n    }\n\n    init = async function() {\n        // Get the localization lang strings and turn them into object.\n        const langStringKeys = [\n            'insertimage',\n            'enterurl',\n            'enterurlor',\n            'imageurlrequired',\n            'uploading',\n            'loading',\n            'sizecustom_help',\n        ];\n        const langStringvalues = await getStrings([...langStringKeys].map((key) => ({key, component})));\n\n        // Convert array to object.\n        this.langStrings = Object.fromEntries(langStringKeys.map((key, index) => [key, langStringvalues[index]]));\n        this.currentModal.setTitle(this.langStrings.insertimage);\n        this.draganddrop = new Dragdrop(this.root, this.canShowFilePicker, this.handleUploadedFile);\n        this.draganddrop.init();\n\n        await this.registerEventListeners();\n    };\n\n\n    /**\n     * Enables or disables the URL-related buttons in the footer based on the current URL and input value.\n     */\n    toggleUrlButton() {\n        const urlInput = this.root.querySelector(Selectors.IMAGE.elements.url);\n        const url = urlInput.value;\n        const addUrl = this.root.querySelector(Selectors.IMAGE.actions.addUrl);\n        addUrl.disabled = !(url !== \"\" && this.isValidUrl(url));\n    }\n\n    /**\n     * Handles the uploaded file, initiates the upload process, and updates the UI during the upload.\n     *\n     * @param {FileList} files - The list of files to upload (usually from a file input field).\n     * @returns {Promise<void>} A promise that resolves when the file is uploaded and processed.\n     */\n    handleUploadedFile = async(files) => {\n        try {\n            this.imageLoading();\n            const fileURL = await uploadFile(this.editor, 'image', files[0], files[0].name, (progress) => {\n                const loaderIcon = this.root.querySelector(Selectors.IMAGE.elements.loaderIcon + ' div');\n                loaderIcon.innerHTML = `${this.langStrings.uploading} ${Math.round(progress)}%`;\n            });\n            const loaderIcon = this.root.querySelector(Selectors.IMAGE.elements.loaderIcon + ' div');\n            loaderIcon.innerHTML = this.langStrings.loading;\n            this.filePickerCallback({url: fileURL});\n        } catch (error) {\n            // Handle the error.\n            const urlWarningLabelEle = this.root.querySelector(Selectors.IMAGE.elements.urlWarning);\n            urlWarningLabelEle.innerHTML = error.error !== undefined ? error.error : error;\n            showElements(Selectors.IMAGE.elements.urlWarning, this.root);\n            this.stopImageLoading();\n        }\n    };\n\n    filePickerCallback(params) {\n        if (params.url) {\n            this.loadImageDetails(params.url);\n        }\n    }\n\n    /**\n     * Check if given string is a valid URL.\n     *\n     * @param {String} urlString URL the link will point to.\n     * @returns {boolean} True is valid, otherwise false.\n     */\n    isValidUrl = urlString => {\n        const urlPattern = new RegExp('^(https?:\\\\/\\\\/)?' + // Protocol.\n                                    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // Domain name.\n                                    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address.\n                                    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'); // Port and path.\n        return !!urlPattern.test(urlString);\n    };\n\n    /**\n     * Handles changes in the image URL input field and loads a preview of the image if the URL has changed.\n     */\n    urlChanged() {\n        hideElements(Selectors.IMAGE.elements.urlWarning, this.root);\n        const input = this.root.querySelector(Selectors.IMAGE.elements.url);\n        if (input.value && input.value !== this.currentUrl) {\n            this.loadImageDetails(input.value);\n        }\n    }\n\n    registerEventListeners() {\n        this.root.addEventListener('click', async(e) => {\n            const addUrlEle = e.target.closest(Selectors.IMAGE.actions.addUrl);\n            if (addUrlEle) {\n                this.urlChanged();\n            }\n\n            const imageBrowserAction = e.target.closest(Selectors.IMAGE.actions.imageBrowser);\n            if (imageBrowserAction && this.canShowFilePicker) {\n                e.preventDefault();\n                const params = await displayFilepicker(this.editor, 'image');\n                this.filePickerCallback(params);\n            }\n        });\n\n        this.root.addEventListener('input', (e) => {\n            const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\n            if (urlEle) {\n                this.toggleUrlButton();\n            }\n        });\n\n        const fileInput = this.root.querySelector(Selectors.IMAGE.elements.fileInput);\n        if (fileInput) {\n            fileInput.addEventListener('change', () => {\n                this.handleUploadedFile(fileInput.files);\n            });\n        }\n    }\n\n    /**\n     * Displays the upload loader and disables UI elements while loading a file.\n     */\n    imageLoading() {\n        showElements(Selectors.IMAGE.elements.loaderIcon, this.root);\n        const elementsToHide = [\n            Selectors.IMAGE.elements.insertImage,\n            Selectors.IMAGE.elements.urlWarning,\n            Selectors.IMAGE.elements.modalFooter,\n        ];\n        hideElements(elementsToHide, this.root);\n    }\n\n    /**\n     * Displays the upload loader and disables UI elements while loading a file.\n     */\n    stopImageLoading() {\n        const elementsToHide = [\n            Selectors.IMAGE.elements.loaderIcon,\n        ];\n        hideElements(elementsToHide, this.root);\n        const elementsToShow = [\n            Selectors.IMAGE.elements.insertImage,\n            Selectors.IMAGE.elements.modalFooter,\n        ];\n        showElements(elementsToShow, this.root);\n    }\n\n    /**\n     * Loads and displays a preview image based on the provided URL, and handles image loading events.\n     *\n     * @param {string} url - The URL of the image to load and display.\n     */\n    loadImageDetails = async function(url) {\n        this.imageLoading();\n        this.currentUrl = url;\n        const image = new Image();\n        image.src = url;\n        image.addEventListener('error', () => {\n            const urlWarningLabelEle = this.root.querySelector(Selectors.IMAGE.elements.urlWarning);\n            urlWarningLabelEle.innerHTML = this.langStrings.imageurlrequired;\n            showElements(Selectors.IMAGE.elements.urlWarning, this.root);\n            this.stopImageLoading();\n        });\n\n        image.addEventListener('load', async() => {\n            let templateContext = {};\n            templateContext.sizecustomhelpicon = {text: this.langStrings.sizecustom_help};\n\n            Promise.all([bodyImageDetails(templateContext, this.root), footerImageDetails(templateContext, this.root)])\n                .then(() => {\n                    const imagedetails = new ImageDetails(\n                        this.root,\n                        this.editor,\n                        this.currentModal,\n                        this.canShowFilePicker,\n                        this.currentUrl,\n                        image,\n                    );\n                    imagedetails.init();\n                    return;\n                }).then(() => {\n                    this.stopImageLoading();\n                    return;\n                })\n                .catch(Notification.exception);\n        });\n    };\n}"],"names":["constructor","root","editor","currentModal","canShowFilePicker","async","langStringKeys","langStringvalues","map","key","component","langStrings","Object","fromEntries","index","setTitle","this","insertimage","draganddrop","Dragdrop","handleUploadedFile","init","registerEventListeners","imageLoading","fileURL","files","name","progress","querySelector","Selectors","IMAGE","elements","loaderIcon","innerHTML","uploading","Math","round","loading","filePickerCallback","url","error","urlWarning","undefined","stopImageLoading","urlString","RegExp","test","currentUrl","image","Image","src","addEventListener","imageurlrequired","templateContext","sizecustomhelpicon","text","sizecustom_help","Promise","all","then","ImageDetails","catch","Notification","exception","toggleUrlButton","value","actions","addUrl","disabled","isValidUrl","params","loadImageDetails","urlChanged","input","e","target","closest","imageBrowser","preventDefault","fileInput","elementsToHide","insertImage","modalFooter","elementsToShow"],"mappings":"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"}