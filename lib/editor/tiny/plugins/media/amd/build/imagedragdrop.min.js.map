{"version":3,"file":"imagedragdrop.min.js","sources":["../src/imagedragdrop.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin image drag and drop class for Moodle.\n *\n * @module      tiny_media/imagedragdrop\n * @copyright   2024 Meirza <meirza.arson@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from './selectors';\nimport {component} from \"./common\";\nimport {getStrings} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\n\nprefetchStrings('tiny_media', [\n    'draganddrop',\n    'droptoupload',\n]);\n\nexport default class dragdrop {\n\n    constructor(root, canShowFilePicker, handleUploadedFile) {\n        this.canShowFilePicker = canShowFilePicker;\n        this.handleUploadedFile = handleUploadedFile;\n\n        // Elements.\n        this.dropZoneEle = root.querySelector(Selectors.IMAGE.elements.dropzone);\n        this.dropzoneLabelEle = root.querySelector(Selectors.IMAGE.elements.dropzoneLabel);\n        this.dropzoneIconEle = root.querySelector(Selectors.IMAGE.elements.dropzoneIcon);\n        this.dropZoneLabelIconEle = root.querySelector(Selectors.IMAGE.elements.dropzoneIconLabel);\n        this.fileInput = root.querySelector(Selectors.IMAGE.elements.fileInput);\n    }\n\n    async init() {\n        const langStringKeys = [\n            'draganddrop',\n            'droptoupload',\n        ];\n        const langStringvalues = await getStrings([...langStringKeys].map((key) => ({key, component})));\n\n        // Convert array to object.\n        this.langStrings = Object.fromEntries(langStringKeys.map((key, index) => [key, langStringvalues[index]]));\n\n        await this.addEventListeners();\n    }\n\n    /**\n     * Add event listeners to the drag and drop elements.\n     */\n    async addEventListeners() {\n        // Drop zone event listeners.\n        if (this.canShowFilePicker) {\n            this.dropZoneEle.addEventListener('dragover', (e) => {\n                e.preventDefault();\n                this.dropzoneLabelEle.innerHTML = this.langStrings.droptoupload;\n                this.dropzoneIconEle.classList.add(\"text-primary\");\n                this.dropzoneIconEle.classList.remove(\"text-secondary\");\n            });\n            this.dropZoneEle.addEventListener('dragleave', () => {\n                this.dropzoneLabelEle.innerHTML = this.langStrings.draganddrop;\n                this.dropzoneIconEle.classList.add(\"text-secondary\");\n                this.dropzoneIconEle.classList.remove(\"text-primary\");\n            });\n            this.dropZoneEle.addEventListener('drop', (e) => {\n                e.preventDefault();\n                this.handleUploadedFile(e.dataTransfer.files);\n                this.dropzoneLabelEle.innerHTML = this.langStrings.draganddrop;\n                this.dropzoneIconEle.classList.add(\"text-secondary\");\n                this.dropzoneIconEle.classList.remove(\"text-primary\");\n            });\n            this.dropZoneLabelIconEle.addEventListener('click', () => {\n                this.fileInput.click();\n            });\n       }\n    }\n}\n"],"names":["constructor","root","canShowFilePicker","handleUploadedFile","dropZoneEle","querySelector","Selectors","IMAGE","elements","dropzone","dropzoneLabelEle","dropzoneLabel","dropzoneIconEle","dropzoneIcon","dropZoneLabelIconEle","dropzoneIconLabel","fileInput","langStringKeys","langStringvalues","map","key","component","langStrings","Object","fromEntries","index","this","addEventListeners","addEventListener","e","preventDefault","innerHTML","droptoupload","classList","add","remove","draganddrop","dataTransfer","files","click"],"mappings":";;;;;;;iLA4BgB,aAAc,CAC1B,cACA,+CAKAA,YAAYC,KAAMC,kBAAmBC,yBAC5BD,kBAAoBA,uBACpBC,mBAAqBA,wBAGrBC,YAAcH,KAAKI,cAAcC,mBAAUC,MAAMC,SAASC,eAC1DC,iBAAmBT,KAAKI,cAAcC,mBAAUC,MAAMC,SAASG,oBAC/DC,gBAAkBX,KAAKI,cAAcC,mBAAUC,MAAMC,SAASK,mBAC9DC,qBAAuBb,KAAKI,cAAcC,mBAAUC,MAAMC,SAASO,wBACnEC,UAAYf,KAAKI,cAAcC,mBAAUC,MAAMC,SAASQ,8BAIvDC,eAAiB,CACnB,cACA,gBAEEC,uBAAyB,mBAAW,IAAID,gBAAgBE,KAAKC,OAAUA,IAAAA,IAAKC,UAAAA,4BAG7EC,YAAcC,OAAOC,YAAYP,eAAeE,KAAI,CAACC,IAAKK,QAAU,CAACL,IAAKF,iBAAiBO,iBAE1FC,KAAKC,8CAQPD,KAAKxB,yBACAE,YAAYwB,iBAAiB,YAAaC,IAC3CA,EAAEC,sBACGpB,iBAAiBqB,UAAYL,KAAKJ,YAAYU,kBAC9CpB,gBAAgBqB,UAAUC,IAAI,qBAC9BtB,gBAAgBqB,UAAUE,OAAO,0BAErC/B,YAAYwB,iBAAiB,aAAa,UACtClB,iBAAiBqB,UAAYL,KAAKJ,YAAYc,iBAC9CxB,gBAAgBqB,UAAUC,IAAI,uBAC9BtB,gBAAgBqB,UAAUE,OAAO,wBAErC/B,YAAYwB,iBAAiB,QAASC,IACvCA,EAAEC,sBACG3B,mBAAmB0B,EAAEQ,aAAaC,YAClC5B,iBAAiBqB,UAAYL,KAAKJ,YAAYc,iBAC9CxB,gBAAgBqB,UAAUC,IAAI,uBAC9BtB,gBAAgBqB,UAAUE,OAAO,wBAErCrB,qBAAqBc,iBAAiB,SAAS,UAC3CZ,UAAUuB"}