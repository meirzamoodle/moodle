{"version":3,"file":"imagedetails.min.js","sources":["../src/imagedetails.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin image details class for Moodle.\n *\n * @module      tiny_media/imagedetails\n * @copyright   2024 Meirza <meirza.arson@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Notification from 'core/notification';\nimport Config from 'core/config';\nimport ModalEvents from 'core/modal_events';\nimport Pending from 'core/pending';\nimport Selectors from './selectors';\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\nimport {ImageInsert} from 'tiny_media/imageinsert';\nimport {\n    bodyImageInsert,\n    footerImageInsert,\n    showElements,\n    hideElements,\n    isPercentageValue\n} from 'tiny_media/imagehelpers';\n\nexport class ImageDetails {\n    DEFAULTS = {\n        WIDTH: 160,\n        HEIGHT: 160,\n    };\n\n    rawImageDimensions = null;\n\n    constructor(\n        root,\n        editor,\n        currentModal,\n        canShowFilePicker,\n        currentUrl,\n        image,\n    ) {\n        this.root = root;\n        this.editor = editor;\n        this.currentModal = currentModal;\n        this.canShowFilePicker = canShowFilePicker;\n        this.currentUrl = currentUrl;\n        this.image = image;\n    }\n\n    init = async function() {\n        this.currentModal.setTitle(getString('imagedetails', 'tiny_media'));\n        this.imageTypeChecked();\n        this.presentationChanged();\n        this.storeImageDimensions(this.image);\n        this.setImageDimensions();\n        await this.registerEventListeners();\n    };\n\n    /**\n     * Loads and displays a preview image based on the provided URL, and handles image loading events.\n     */\n    loadInsertImage = async function() {\n        const templateContext = {elementid: this.editor.id, showfilepicker: this.canShowFilePicker};\n\n        Promise.all([bodyImageInsert(templateContext, this.root), footerImageInsert(templateContext, this.root)])\n            .then(() => {\n                const imageinsert = new ImageInsert(\n                    this.root,\n                    this.editor,\n                    this.currentModal,\n                    this.canShowFilePicker,\n                );\n                imageinsert.init();\n                return;\n            })\n            .catch(Notification.exception);\n    };\n\n    storeImageDimensions(image) {\n        // Store dimensions of the raw image, falling back to defaults for images without dimensions (e.g. SVG).\n        this.rawImageDimensions = {\n            width: image.width || this.DEFAULTS.WIDTH,\n            height: image.height || this.DEFAULTS.HEIGHT,\n        };\n\n        const getCurrentWidth = (element) => {\n            if (element.value === '') {\n                element.value = this.rawImageDimensions.width;\n            }\n            return element.value;\n        };\n\n        const getCurrentHeight = (element) => {\n            if (element.value === '') {\n                element.value = this.rawImageDimensions.height;\n            }\n            return element.value;\n        };\n\n        const widthInput = this.root.querySelector(Selectors.IMAGE.elements.width);\n        const currentWidth = getCurrentWidth(widthInput);\n\n        const heightInput = this.root.querySelector(Selectors.IMAGE.elements.height);\n        const currentHeight = getCurrentHeight(heightInput);\n\n        const preview = this.root.querySelector(Selectors.IMAGE.elements.preview);\n        preview.setAttribute('src', image.src);\n        preview.style.display = '';\n\n        // Ensure the checkbox always in unchecked status when an image loads at first.\n        const constrain = this.root.querySelector(Selectors.IMAGE.elements.constrain);\n        constrain.checked = false;\n\n        /**\n         * Sets the selected size option based on current width and height values.\n         *\n         * @param {number} currentWidth - The current width value.\n         * @param {number} currentHeight - The current height value.\n         */\n        const setSelectedSize = (currentWidth, currentHeight) => {\n            if (this.rawImageDimensions.width === currentWidth &&\n                this.rawImageDimensions.height === currentHeight\n            ) {\n                this.currentWidth = this.rawImageDimensions.width;\n                this.currentHeight = this.rawImageDimensions.height;\n                this.sizeChecked('original');\n            } else {\n                this.currentWidth = currentWidth;\n                this.currentHeight = currentHeight;\n                this.sizeChecked('custom');\n            }\n        };\n\n        setSelectedSize(Number(currentWidth), Number(currentHeight));\n    }\n\n    /**\n     * Handles the selection of image size options and updates the form inputs accordingly.\n     *\n     * @param {string} option - The selected image size option (\"original\" or \"custom\").\n     */\n    sizeChecked(option) {\n        const widthInput = this.root.querySelector(Selectors.IMAGE.elements.width);\n        const heightInput = this.root.querySelector(Selectors.IMAGE.elements.height);\n        if (option === \"original\") {\n            this.sizeOriginalChecked();\n            widthInput.value = this.rawImageDimensions.width;\n            heightInput.value = this.rawImageDimensions.height;\n        } else if (option === \"custom\") {\n            this.sizeCustomChecked();\n            widthInput.value = this.currentWidth;\n            heightInput.value = this.currentHeight;\n        }\n        this.autoAdjustSize();\n    }\n\n    autoAdjustSize(forceHeight = false) {\n        // If we do not know the image size, do not do anything.\n        if (!this.rawImageDimensions) {\n            return;\n        }\n\n        const widthField = this.root.querySelector(Selectors.IMAGE.elements.width);\n        const heightField = this.root.querySelector(Selectors.IMAGE.elements.height);\n\n        const normalizeFieldData = (fieldData) => {\n            fieldData.isPercentageValue = !!isPercentageValue(fieldData.field.value);\n            if (fieldData.isPercentageValue) {\n                fieldData.percentValue = parseInt(fieldData.field.value, 10);\n                fieldData.pixelSize = this.rawImageDimensions[fieldData.type] / 100 * fieldData.percentValue;\n            } else {\n                fieldData.pixelSize = parseInt(fieldData.field.value, 10);\n                fieldData.percentValue = fieldData.pixelSize / this.rawImageDimensions[fieldData.type] * 100;\n            }\n\n            return fieldData;\n        };\n\n        const getKeyField = () => {\n            const getValue = () => {\n                if (forceHeight) {\n                    return {\n                        field: heightField,\n                        type: 'height',\n                    };\n                } else {\n                    return {\n                        field: widthField,\n                        type: 'width',\n                    };\n                }\n            };\n\n            const currentValue = getValue();\n            if (currentValue.field.value === '') {\n                currentValue.field.value = this.rawImageDimensions[currentValue.type];\n            }\n\n            return normalizeFieldData(currentValue);\n        };\n\n        const getRelativeField = () => {\n            if (forceHeight) {\n                return normalizeFieldData({\n                    field: widthField,\n                    type: 'width',\n                });\n            } else {\n                return normalizeFieldData({\n                    field: heightField,\n                    type: 'height',\n                });\n            }\n        };\n\n        // Now update with the new values.\n        const constrainField = this.root.querySelector(Selectors.IMAGE.elements.constrain);\n        if (constrainField.checked) {\n            const keyField = getKeyField();\n            const relativeField = getRelativeField();\n            // We are keeping the image in proportion.\n            // Calculate the size for the relative field.\n            if (keyField.isPercentageValue) {\n                // In proportion, so the percentages are the same.\n                relativeField.field.value = keyField.field.value;\n                relativeField.percentValue = keyField.percentValue;\n            } else {\n                relativeField.pixelSize = Math.round(\n                    keyField.pixelSize / this.rawImageDimensions[keyField.type] * this.rawImageDimensions[relativeField.type]\n                );\n                relativeField.field.value = relativeField.pixelSize;\n            }\n        }\n\n        // Store the custom width and height to reuse.\n        this.currentWidth = Number(widthField.value) !== this.rawImageDimensions.width ? widthField.value : this.currentWidth;\n        this.currentHeight = Number(heightField.value) !== this.rawImageDimensions.height ? heightField.value : this.currentHeight;\n    }\n\n    /**\n     * Sets the dimensions of the image preview element based on user input and constraints.\n     */\n    setImageDimensions = () => {\n        const imagePreviewBox = this.root.querySelector(Selectors.IMAGE.elements.previewBox);\n        const image = this.root.querySelector(Selectors.IMAGE.elements.preview);\n        const widthField = this.root.querySelector(Selectors.IMAGE.elements.width);\n        const heightField = this.root.querySelector(Selectors.IMAGE.elements.height);\n\n        const updateImageDimensions = () => {\n            // Get the latest dimensions of the preview box for responsiveness.\n            const boxWidth = imagePreviewBox.clientWidth;\n            const boxHeight = imagePreviewBox.clientHeight;\n            // Get the new width and height for the image.\n            const dimensions = this.fitSquareIntoBox(widthField.value, heightField.value, boxWidth, boxHeight);\n            image.style.width = `${dimensions.width}px`;\n            image.style.height = `${dimensions.height}px`;\n        };\n        // If the client size is zero, then get the new dimensions once the modal is shown.\n        if (imagePreviewBox.clientWidth === 0) {\n            // Call the shown event.\n            this.currentModal.getRoot().on(ModalEvents.shown, () => {\n                updateImageDimensions();\n            });\n        } else {\n            updateImageDimensions();\n        }\n    };\n\n    /**\n     * Handles the selection of the \"Original Size\" option and updates the form elements accordingly.\n     */\n    sizeOriginalChecked() {\n        this.root.querySelector(Selectors.IMAGE.elements.sizeOriginal).checked = true;\n        this.root.querySelector(Selectors.IMAGE.elements.sizeCustom).checked = false;\n        hideElements(Selectors.IMAGE.elements.properties, this.root);\n    }\n\n    /**\n     * Handles the selection of the \"Custom Size\" option and updates the form elements accordingly.\n     */\n    sizeCustomChecked() {\n        this.root.querySelector(Selectors.IMAGE.elements.sizeOriginal).checked = false;\n        this.root.querySelector(Selectors.IMAGE.elements.sizeCustom).checked = true;\n        showElements(Selectors.IMAGE.elements.properties, this.root);\n    }\n\n    /**\n     * Handles changes in the image presentation checkbox and enables/disables the image alt text input accordingly.\n     */\n    presentationChanged() {\n        const presentation = this.root.querySelector(Selectors.IMAGE.elements.presentation);\n        const alt = this.root.querySelector(Selectors.IMAGE.elements.alt);\n        alt.disabled = presentation.checked;\n    }\n\n    /**\n     * This function checks whether an image URL is local (within the same website's domain) or external (from an external source).\n     * Depending on the result, it dynamically updates the visibility and content of HTML elements in a user interface.\n     * If the image is local then we only show it's filename.\n     * If the image is external then it will show full URL and it can be updated.\n     */\n    imageTypeChecked() {\n        const regex = new RegExp(`${Config.wwwroot}`);\n\n        // True if the URL is from external, otherwise false.\n        const isExternalUrl = regex.test(this.currentUrl) === false;\n\n        // Hide the URL input.\n        hideElements(Selectors.IMAGE.elements.url, this.root);\n\n        if (!isExternalUrl) {\n            // Split the URL by '/' to get an array of segments.\n            const segments = this.currentUrl.split('/');\n            // Get the last segment, which should be the filename.\n            const filename = segments.pop().split('?')[0];\n            // Show the file name.\n            this.setFilenameLabel(decodeURI(filename));\n        } else {\n\n            this.setFilenameLabel(decodeURI(this.currentUrl));\n        }\n    }\n\n    /**\n     * Set the string for the URL label element.\n     *\n     * @param {string} label - The label text to set.\n     */\n    setFilenameLabel(label) {\n        const urlLabelEle = this.root.querySelector(Selectors.IMAGE.elements.fileNameLabel);\n        if (urlLabelEle) {\n            urlLabelEle.innerHTML = label;\n            urlLabelEle.setAttribute(\"title\", label);\n        }\n    }\n\n    toggleAriaInvalid(selectors, predicate) {\n        selectors.forEach((selector) => {\n            const elements = this.root.querySelectorAll(selector);\n            elements.forEach((element) => element.setAttribute('aria-invalid', predicate));\n        });\n    }\n\n    hasErrorUrlField() {\n        const urlError = this.currentUrl === '';\n        if (urlError) {\n            showElements(Selectors.IMAGE.elements.urlWarning, this.root);\n        } else {\n            hideElements(Selectors.IMAGE.elements.urlWarning, this.root);\n        }\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.url], urlError);\n\n        return urlError;\n    }\n\n    hasErrorAltField() {\n        const alt = this.root.querySelector(Selectors.IMAGE.elements.alt).value;\n        const presentation = this.root.querySelector(Selectors.IMAGE.elements.presentation).checked;\n        const imageAltError = alt === '' && !presentation;\n        if (imageAltError) {\n            showElements(Selectors.IMAGE.elements.altWarning, this.root);\n        } else {\n            hideElements(Selectors.IMAGE.elements.urlWaaltWarningrning, this.root);\n        }\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.alt, Selectors.IMAGE.elements.presentation], imageAltError);\n\n        return imageAltError;\n    }\n\n    updateWarning() {\n        const urlError = this.hasErrorUrlField();\n        const imageAltError = this.hasErrorAltField();\n\n        return urlError || imageAltError;\n    }\n\n    getImageContext() {\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            return null;\n        }\n\n        const classList = [];\n\n        return {\n            url: this.currentUrl,\n            alt: this.root.querySelector(Selectors.IMAGE.elements.alt).value,\n            width: this.root.querySelector(Selectors.IMAGE.elements.width).value,\n            height: this.root.querySelector(Selectors.IMAGE.elements.height).value,\n            presentation: this.root.querySelector(Selectors.IMAGE.elements.presentation).checked,\n            customStyle: this.root.querySelector(Selectors.IMAGE.elements.customStyle).value,\n            classlist: classList.join(' '),\n        };\n    }\n\n    setImage() {\n        const pendingPromise = new Pending('tiny_media:setImage');\n        const url = this.currentUrl;\n        if (url === '') {\n            return;\n        }\n\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            pendingPromise.resolve();\n            return;\n        }\n\n        // Check for invalid width or height.\n        const width = this.root.querySelector(Selectors.IMAGE.elements.width).value;\n        if (!isPercentageValue(width) && isNaN(parseInt(width, 10))) {\n            this.root.querySelector(Selectors.IMAGE.elements.width).focus();\n            pendingPromise.resolve();\n            return;\n        }\n\n        const height = this.root.querySelector(Selectors.IMAGE.elements.height).value;\n        if (!isPercentageValue(height) && isNaN(parseInt(height, 10))) {\n            this.root.querySelector(Selectors.IMAGE.elements.height).focus();\n            pendingPromise.resolve();\n            return;\n        }\n\n        Templates.render('tiny_media/image', this.getImageContext())\n        .then((html) => {\n            this.editor.insertContent(html);\n            this.currentModal.destroy();\n            pendingPromise.resolve();\n\n            return html;\n        })\n        .catch(error => {\n            window.console.log(error);\n        });\n    }\n\n    async registerEventListeners() {\n\n        const submitAction = this.root.querySelector(Selectors.IMAGE.actions.submit);\n        submitAction.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.setImage();\n        });\n\n        this.root.addEventListener('click', (e) => {\n            const deleteImageEle = e.target.closest(Selectors.IMAGE.actions.deleteImage);\n            if (deleteImageEle) {\n                // Removing the image in the preview will bring the user to the insert page.\n                this.loadInsertImage();\n            }\n        });\n\n        this.root.addEventListener('change', (e) => {\n            const presentationEle = e.target.closest(Selectors.IMAGE.elements.presentation);\n            if (presentationEle) {\n                this.presentationChanged();\n            }\n\n            const constrainEle = e.target.closest(Selectors.IMAGE.elements.constrain);\n            if (constrainEle) {\n                this.autoAdjustSize();\n            }\n\n            const sizeOriginalEle = e.target.closest(Selectors.IMAGE.elements.sizeOriginal);\n            if (sizeOriginalEle) {\n                this.sizeChecked('original');\n            }\n\n            const sizeCustomEle = e.target.closest(Selectors.IMAGE.elements.sizeCustom);\n            if (sizeCustomEle) {\n                this.sizeChecked('custom');\n            }\n        });\n\n        this.root.addEventListener('blur', (e) => {\n            if (e.target.nodeType === Node.ELEMENT_NODE) {\n\n                const presentationEle = e.target.closest(Selectors.IMAGE.elements.presentation);\n                if (presentationEle) {\n                    this.presentationChanged();\n                }\n            }\n        }, true);\n\n        // Character count.\n        this.root.addEventListener('keyup', (e) => {\n            const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\n            if (altEle) {\n                this.handleKeyupCharacterCount();\n            }\n        });\n\n        this.root.addEventListener('input', (e) => {\n            const widthEle = e.target.closest(Selectors.IMAGE.elements.width);\n            if (widthEle) {\n                // Avoid empty value.\n                widthEle.value = widthEle.value === \"\" ? 0 : Number(widthEle.value);\n                this.autoAdjustSize();\n            }\n\n            const heightEle = e.target.closest(Selectors.IMAGE.elements.height);\n            if (heightEle) {\n                // Avoid empty value.\n                heightEle.value = heightEle.value === \"\" ? 0 : Number(heightEle.value);\n                this.autoAdjustSize(true);\n            }\n        });\n    }\n\n    handleKeyupCharacterCount() {\n        const alt = this.root.querySelector(Selectors.IMAGE.elements.alt).value;\n        const current = this.root.querySelector('#currentcount');\n        current.innerHTML = alt.length;\n    }\n\n    /**\n     * Calculates the dimensions to fit a square into a specified box while maintaining aspect ratio.\n     *\n     * @param {number} squareWidth - The width of the square.\n     * @param {number} squareHeight - The height of the square.\n     * @param {number} boxWidth - The width of the box.\n     * @param {number} boxHeight - The height of the box.\n     * @returns {Object} An object with the new width and height of the square to fit in the box.\n     */\n    fitSquareIntoBox = (squareWidth, squareHeight, boxWidth, boxHeight) => {\n        if (squareWidth < boxWidth && squareHeight < boxHeight) {\n          // If the square is smaller than the box, keep its dimensions.\n          return {\n            width: squareWidth,\n            height: squareHeight,\n          };\n        }\n        // Calculate the scaling factor based on the minimum scaling required to fit in the box.\n        const widthScaleFactor = boxWidth / squareWidth;\n        const heightScaleFactor = boxHeight / squareHeight;\n        const minScaleFactor = Math.min(widthScaleFactor, heightScaleFactor);\n        // Scale the square's dimensions based on the aspect ratio and the minimum scaling factor.\n        const newWidth = squareWidth * minScaleFactor;\n        const newHeight = squareHeight * minScaleFactor;\n        return {\n          width: newWidth,\n          height: newHeight,\n        };\n    };\n}"],"names":["constructor","root","editor","currentModal","canShowFilePicker","currentUrl","image","WIDTH","HEIGHT","async","setTitle","imageTypeChecked","presentationChanged","storeImageDimensions","this","setImageDimensions","registerEventListeners","templateContext","elementid","id","showfilepicker","Promise","all","then","ImageInsert","init","catch","Notification","exception","imagePreviewBox","querySelector","Selectors","IMAGE","elements","previewBox","preview","widthField","width","heightField","height","updateImageDimensions","boxWidth","clientWidth","boxHeight","clientHeight","dimensions","fitSquareIntoBox","value","style","getRoot","on","ModalEvents","shown","squareWidth","squareHeight","widthScaleFactor","heightScaleFactor","minScaleFactor","Math","min","rawImageDimensions","DEFAULTS","currentWidth","element","getCurrentWidth","currentHeight","getCurrentHeight","setAttribute","src","display","constrain","checked","sizeChecked","setSelectedSize","Number","option","widthInput","heightInput","sizeOriginalChecked","sizeCustomChecked","autoAdjustSize","forceHeight","normalizeFieldData","fieldData","isPercentageValue","field","percentValue","parseInt","pixelSize","type","getKeyField","currentValue","keyField","relativeField","round","sizeOriginal","sizeCustom","properties","presentation","alt","disabled","isExternalUrl","RegExp","Config","wwwroot","test","url","setFilenameLabel","decodeURI","filename","split","pop","label","urlLabelEle","fileNameLabel","innerHTML","toggleAriaInvalid","selectors","predicate","forEach","selector","querySelectorAll","hasErrorUrlField","urlError","urlWarning","hasErrorAltField","imageAltError","altWarning","urlWaaltWarningrning","updateWarning","getImageContext","customStyle","classlist","join","setImage","pendingPromise","Pending","resolve","isNaN","focus","render","html","insertContent","destroy","error","window","console","log","actions","submit","addEventListener","e","preventDefault","target","closest","deleteImage","loadInsertImage","nodeType","Node","ELEMENT_NODE","handleKeyupCharacterCount","widthEle","heightEle","length"],"mappings":"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"}