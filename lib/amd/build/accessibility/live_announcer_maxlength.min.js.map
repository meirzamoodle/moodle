{"version":3,"file":"live_announcer_maxlength.min.js","sources":["../../src/accessibility/live_announcer_maxlength.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handles accessibility announcements when text inputs reach their maxlength.\n *\n * @module     core/accessibility/live_announcer_maxlength\n * @copyright  Meirza <meirza.arson@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\nimport {getString} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\nimport liveAnnouncer from 'core/accessibility/live_announcer';\n\n// Prefetch necessary strings for performance.\nprefetchStrings('tiny_media', ['maxlengthreached']);\n\nexport default class {\n    static isInitialized = false;\n\n    constructor() {\n        this.registerEvents();\n    }\n\n    static init() {\n        if (this.isInitialized) {\n            return;\n        }\n        this.isInitialized = true;\n        new this();\n    }\n\n    registerEvents() {\n        document.addEventListener('keyup', this.handleInputEvent);\n    }\n\n    /**\n     * Handles input events and announces when maxlength is reached.\n     *\n     * @param {KeyboardEvent} event - The input event triggered on keyup.\n     */\n    handleInputEvent = async(event) => {\n        const {target} = event;\n\n        // Check if the target is a valid input element with maxlength attribute.\n        if (!target.hasAttribute('maxlength') || !['INPUT', 'TEXTAREA'].includes(target.tagName)) {\n            return;\n        }\n\n        const maxLength = parseInt(target.getAttribute('maxlength'), 10);\n        const currentLength = target.value.length;\n\n        if (currentLength >= maxLength) {\n            const message = await getString('maxlengthreached', 'core', maxLength);\n            const reAnnouncement = true; // Force re-announcement.\n            liveAnnouncer.updateAnnouncer(message, reAnnouncement);\n        }\n    };\n}\n"],"names":["constructor","async","target","event","hasAttribute","includes","tagName","maxLength","parseInt","getAttribute","value","length","message","reAnnouncement","updateAnnouncer","registerEvents","this","isInitialized","document","addEventListener","handleInputEvent"],"mappings":"qhBA4BgB,aAAc,CAAC,kCAK3BA,uDAqBmBC,MAAAA,cACTC,OAACA,QAAUC,UAGZD,OAAOE,aAAa,eAAiB,CAAC,QAAS,YAAYC,SAASH,OAAOI,sBAI1EC,UAAYC,SAASN,OAAOO,aAAa,aAAc,OACvCP,OAAOQ,MAAMC,QAEdJ,UAAW,OACtBK,cAAgB,kBAAU,mBAAoB,OAAQL,WACtDM,gBAAiB,0BACTC,gBAAgBF,QAASC,yBAlCtCE,+BAIDC,KAAKC,qBAGJA,eAAgB,MACjBD,MAGRD,iBACIG,SAASC,iBAAiB,QAASH,KAAKI,0FAfrB"}