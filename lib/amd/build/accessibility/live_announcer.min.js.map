{"version":3,"file":"live_announcer.min.js","sources":["../../src/accessibility/live_announcer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handles accessibility announcements.\n *\n * @module     core/accessibility/live_announcer\n * @copyright  Meirza <meirza.arson@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\n\nimport ModalEvents from 'core/modal_events';\n\nconst SELECTORS = {\n    announcer: 'liveannouncer',\n};\n\nclass LiveAnnouncer {\n    static isInitialized = false;\n\n    constructor() {\n        this.toggleSuffix = false;\n        this.currentAnnouncer = null;\n        this.announcerCount = 1;\n        this.announcerIds = [`${SELECTORS.announcer}0`];\n        this.currentAnnouncer = document.getElementById(this.announcerIds[0]);\n        this.registerEvents();\n    }\n\n    static init() {\n        if (this.isInitialized) {\n            return;\n        }\n        this.isInitialized = true;\n        new this();\n    }\n\n    registerEvents() {\n        document.addEventListener(ModalEvents.shown, this.handleModalShown);\n        document.addEventListener(ModalEvents.hidden, this.handleModalHidden);\n    }\n\n    /**\n     * Handles the modal shown event.\n     * Dynamically creates a new announcer inside the modal to ensure screen readers work properly.\n     *\n     * @param {CustomEvent} event - The modal shown event containing the modal element.\n     */\n    handleModalShown = (event) => {\n        const newAnnouncerId = `${SELECTORS.announcer}${this.announcerCount}`;\n        const newAnnouncer = document.createElement('div');\n        newAnnouncer.setAttribute('id', newAnnouncerId);\n        newAnnouncer.setAttribute('aria-live', 'polite');\n        newAnnouncer.setAttribute('aria-atomic', 'true');\n        newAnnouncer.className = 'visually-hidden';\n\n        const modalFooter = event.target.querySelector('.modal-footer');\n        if (modalFooter) {\n            modalFooter.appendChild(newAnnouncer);\n            this.currentAnnouncer = newAnnouncer;\n            this.announcerIds.push(newAnnouncerId);\n            this.announcerCount++;\n        }\n    };\n\n    /**\n     * Handles the modal hidden event.\n     * Cleans up announcer references to the previous context.\n     */\n     handleModalHidden = () => {\n        this.announcerIds.pop();\n        const lastAnnouncerId = this.announcerIds.at(-1);\n        this.currentAnnouncer = lastAnnouncerId ? document.getElementById(lastAnnouncerId) : null;\n    };\n\n    /**\n     * Updates the announcer element with the given message.\n     * Toggles a suffix to force screen readers to re-announce.\n     *\n     * @param {string} message - The message to announce.\n     * @param {boolean} [reAnnouncement=false] - Whether to force re-announcement by toggling a suffix.\n     */\n    updateAnnouncer(message, reAnnouncement = false) {\n        if (!this.currentAnnouncer) {\n            return;\n        }\n\n        let suffix = '';\n        if (reAnnouncement) {\n            suffix = this.toggleSuffix ? '.' : '';\n            this.toggleSuffix = !this.toggleSuffix;\n        }\n\n        this.currentAnnouncer.textContent = `${message}${suffix}`;\n    }\n}\n\nexport default new LiveAnnouncer();\n"],"names":["SELECTORS","LiveAnnouncer","constructor","event","newAnnouncerId","this","announcerCount","newAnnouncer","document","createElement","setAttribute","className","modalFooter","target","querySelector","appendChild","currentAnnouncer","announcerIds","push","pop","lastAnnouncerId","at","getElementById","toggleSuffix","registerEvents","isInitialized","addEventListener","ModalEvents","shown","handleModalShown","hidden","handleModalHidden","updateAnnouncer","message","reAnnouncement","suffix","textContent"],"mappings":"mbA0BMA,oBACS,sBAGTC,cAGFC,uDA4BoBC,cACVC,yBAAoBJ,4BAAsBK,KAAKC,gBAC/CC,aAAeC,SAASC,cAAc,OAC5CF,aAAaG,aAAa,KAAMN,gBAChCG,aAAaG,aAAa,YAAa,UACvCH,aAAaG,aAAa,cAAe,QACzCH,aAAaI,UAAY,wBAEnBC,YAAcT,MAAMU,OAAOC,cAAc,iBAC3CF,cACAA,YAAYG,YAAYR,mBACnBS,iBAAmBT,kBACnBU,aAAaC,KAAKd,qBAClBE,+DAQQ,UACZW,aAAaE,YACZC,gBAAkBf,KAAKY,aAAaI,IAAI,QACzCL,iBAAmBI,gBAAkBZ,SAASc,eAAeF,iBAAmB,aAnDhFG,cAAe,OACfP,iBAAmB,UACnBV,eAAiB,OACjBW,aAAe,WAAIjB,+BACnBgB,iBAAmBR,SAASc,eAAejB,KAAKY,aAAa,SAC7DO,+BAIDnB,KAAKoB,qBAGJA,eAAgB,MACjBpB,MAGRmB,iBACIhB,SAASkB,iBAAiBC,sBAAYC,MAAOvB,KAAKwB,kBAClDrB,SAASkB,iBAAiBC,sBAAYG,OAAQzB,KAAK0B,mBA2CvDC,gBAAgBC,aAASC,2EAChB7B,KAAKW,4BAINmB,OAAS,GACTD,iBACAC,OAAS9B,KAAKkB,aAAe,IAAM,QAC9BA,cAAgBlB,KAAKkB,mBAGzBP,iBAAiBoB,sBAAiBH,gBAAUE,yBA5EnDlC,+BACqB,gBA+EZ,IAAIA"}