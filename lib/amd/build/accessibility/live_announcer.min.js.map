{"version":3,"file":"live_announcer.min.js","sources":["../../src/accessibility/live_announcer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handles accessibility announcements.\n *\n * @module     core/accessibility/live_announcer\n * @copyright  Meirza <meirza.arson@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\n\nconst SELECTORS = {\n    announcer: '#liveannouncer',\n};\n\nclass LiveAnnouncer {\n    static isInitialized = false;\n\n    constructor() {\n        this.toggleSuffix = false;\n        this.announcerElement = document.querySelector(SELECTORS.announcer);\n    }\n\n    static init() {\n        if (this.isInitialized) {\n            return;\n        }\n        this.isInitialized = true;\n        new this();\n    }\n\n    /**\n     * Updates the announcer element with the given message.\n     * Toggles a suffix to force screen readers to re-announce.\n     *\n     * @param {string} message - The message to announce.\n     * @param {boolean} [reAnnouncement=false] - Whether to force re-announcement by toggling a suffix.\n     */\n    updateAnnouncer(message, reAnnouncement = false) {\n        if (!this.announcerElement) {\n            return;\n        }\n\n        let suffix = '';\n        if (reAnnouncement) {\n            suffix = this.toggleSuffix ? '.' : '';\n            this.toggleSuffix = !this.toggleSuffix;\n        }\n\n        this.announcerElement.textContent = `${message}${suffix}`;\n    }\n}\n\nexport default new LiveAnnouncer();\n"],"names":["SELECTORS","LiveAnnouncer","constructor","toggleSuffix","announcerElement","document","querySelector","this","isInitialized","updateAnnouncer","message","reAnnouncement","suffix","textContent"],"mappings":";;;;;;;;;MAwBMA,oBACS,uBAGTC,cAGFC,mBACSC,cAAe,OACfC,iBAAmBC,SAASC,cAAcN,mCAI3CO,KAAKC,qBAGJA,eAAgB,MACjBD,MAURE,gBAAgBC,aAASC,2EAChBJ,KAAKH,4BAINQ,OAAS,GACTD,iBACAC,OAASL,KAAKJ,aAAe,IAAM,QAC9BA,cAAgBI,KAAKJ,mBAGzBC,iBAAiBS,sBAAiBH,gBAAUE,kCAjC9B,8BADrBX,kIAsCS,IAAIA"}