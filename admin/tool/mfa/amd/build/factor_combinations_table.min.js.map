{"version":3,"file":"factor_combinations_table.min.js","sources":["../src/factor_combinations_table.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Get the factor combinations table.\n *\n * @module     tool_mfa/factor_combinations_table\n * @copyright  Meirza <meirza.arson@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as DynamicTable from 'core_table/dynamic';\nimport Notification from 'core/notification';\nimport Ajax from 'core/ajax';\n\nconst Selectors = {\n    mfaCombinationsWrapper: '#mfacombinations-wrapper',\n    tableForm: uniqueId => `[data-region=\"core_table/dynamic\"][data-table-uniqueid=\"${uniqueId}\"]`,\n};\n\nexport default class {\n    /**\n     * Creates an instance of the class, sets the root and target elements, and registers event listeners.\n     *\n     * @param {string} uniqueId - The unique identifier for the dynamic table form.\n     */\n    constructor(uniqueId) {\n        this.mfaManagement = document.querySelector(Selectors.tableForm(uniqueId));\n        this.factorCombinations = document.querySelector(Selectors.mfaCombinationsWrapper);\n        this.registerEventListeners();\n    }\n\n    /**\n     * Initialise an instance of the class.\n     *\n     * @param {string} uniqueId - The unique identifier for the dynamic table form.\n     */\n    static init(uniqueId) {\n        new this(uniqueId);\n    }\n\n    /**\n     * Registers event listeners for the table content refresh event.\n     * Updates the content of the MFA combinations table when the event is triggered.\n     */\n    registerEventListeners() {\n        document.addEventListener(DynamicTable.Events.tableContentRefreshed, () => {\n            // Only proceed if the MFA management table & factor combinations div wrapper are exist.\n            if (this.mfaManagement && this.factorCombinations) {\n                this.getFactorCombinationsTable()\n                .then((response) => {\n                    this.factorCombinations.innerHTML = response.html;\n                    return;\n                })\n                .catch(Notification.exception);\n            }\n        });\n    }\n\n    /**\n     * Makes an AJAX request to retrieve the HTML for the MFA combinations table.\n     *\n     * @returns {Promise<Object>} A promise that resolves with the response containing the table HTML.\n     */\n    getFactorCombinationsTable() {\n        const request = {\n            methodname: 'tool_mfa_get_factor_combinations_table',\n            args: {},\n        };\n\n        return Ajax.call([request])[0];\n    }\n}\n"],"names":["Selectors","uniqueId","constructor","mfaManagement","document","querySelector","factorCombinations","registerEventListeners","this","addEventListener","DynamicTable","Events","tableContentRefreshed","getFactorCombinationsTable","then","response","innerHTML","html","catch","Notification","exception","Ajax","call","methodname","args"],"mappings":";;;;;;;kHA2BMA,iCACsB,2BADtBA,oBAESC,4EAAuEA,6CASlFC,YAAYD,eACHE,cAAgBC,SAASC,cAAcL,oBAAoBC,gBAC3DK,mBAAqBF,SAASC,cAAcL,uCAC5CO,qCAQGN,cACJO,KAAKP,UAObM,yBACIH,SAASK,iBAAiBC,aAAaC,OAAOC,uBAAuB,KAE7DJ,KAAKL,eAAiBK,KAAKF,yBACtBO,6BACJC,MAAMC,gBACET,mBAAmBU,UAAYD,SAASE,QAGhDC,MAAMC,sBAAaC,cAUhCP,oCAMWQ,cAAKC,KAAK,CALD,CACZC,WAAY,yCACZC,KAAM,MAGkB"}